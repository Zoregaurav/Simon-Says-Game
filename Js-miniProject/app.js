// Game state variables
let gameSeq = []; // Stores the sequence of colors generated by the game
let userSeq = []; // Stores the sequence of colors pressed by the user

let btns = ["yellow", "red", "purple", "green"]; // Array of possible button colors

let started = false; // Flag to check if the game has started
let level = 0; // Current level of the game
let h2 = document.querySelector("h2"); // Selects the <h2> element to display the level


// New variable to store the high score
let highScore = 0;
let h3 = document.querySelector("h3");

// Start the game on any keypress
document.addEventListener("keypress", function () {
  if (started == false) {
    console.log("game is started");
    started = true;
    levelUp();
  }
});

// Flash a button to indicate it's part of the game sequence
function gameFlash(btn) {
  btn.classList.add("flash");
  setTimeout(function () {
    btn.classList.remove("flash");
  }, 250);
}

// Flash a button when the user presses it
function userFlash(btn) {
  btn.classList.add("userFlash");
  setTimeout(function () {
    btn.classList.remove("userFlash");
  }, 250);
}

// Advance to the next level
function levelUp() {
  userSeq = []; // Reset the user's sequence for the new level
  level++;
  h2.innerText = `level ${level}`;

  // Generate a random color and add it to the game sequence
  let randIdx = Math.floor(Math.random() * 4); // Corrected to generate indices 0-3
  let randColor = btns[randIdx];
  let randbtn = document.querySelector(`.${randColor}`);

  gameSeq.push(randColor);
  console.log("Game Sequence:", gameSeq); // Added a more descriptive log
  gameFlash(randbtn);
}

// Check the user's answer against the game's sequence
function checkAns(idx) {
  // Check if the color at the current index matches
  if (userSeq[idx] === gameSeq[idx]) {
    // If correct, check if the user has completed the entire sequence
    
    if (userSeq.length === gameSeq.length) {
      setTimeout(levelUp, 1000); // Only advance level when the full sequence is correct
    }

  } else {
    if (level > highScore) {
      highScore = level; // Update the highest score
    }
    // If the color doesn't match, the game is over
    h2.innerHTML = `Game Over! Your score was <b>${level}</b> <br>Press any key to start.`;
    h3.innerHTML = `Highest Score:${highScore}`; // Display the new high score


    document.querySelector("body").style.backgroundColor = "red";
    setTimeout(function () {
      document.querySelector("body").style.backgroundColor = "white";
    }, 150);
    reset(); // Reset the game state

  }
}

// Handle a button press from the user
function btnPress() {
  let btn = this;
  userFlash(btn);

  let userColor = btn.getAttribute("id");
  userSeq.push(userColor);

  // Check the last pressed button's color
  checkAns(userSeq.length - 1);
}

// Add event listeners to all color buttons
let allBtns = document.querySelectorAll(".btn");
for (let btn of allBtns) {
  btn.addEventListener("click", btnPress);
}

// Reset the game to its initial state
function reset() {
  started = false;
  gameSeq = [];
  userSeq = [];
  level = 0;
}